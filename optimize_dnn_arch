import joblib
import optuna
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from tensorflow.keras.layers import (LSTM, BatchNormalization, Conv1D, Dense,
                                     Dropout, Flatten, Input)
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

# Load data
training_data = pd.read_csv("data/test_dataset_2.csv")

# Extract input and output features
X = training_data[['qubit_frequency_GHz', 'anharmonicity_MHz', 'cavity_frequency_GHz', 'kappa_kHz', 'g_MHz']].values
y = training_data[['cross_length', 'claw_length', 'EJ', 'coupling_length', 'total_length', 'ground_spacing']].values

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Example of creating polynomial features
poly = PolynomialFeatures(degree=2, include_bias=False)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

# Save the polynomial feature transformer
joblib.dump(poly, 'models/poly_transformer.pkl')

# Define the model creation function with different architectures
def create_model(trial):
    model_type = trial.suggest_categorical('model_type', ['dense', 'conv1d', 'lstm'])

    model = Sequential()
    model.add(Input(shape=(X_train_poly.shape[1],)))

    if model_type == 'dense':
        # Dense model
        for i in range(trial.suggest_int('n_layers_dense', 1, 3)):
            model.add(Dense(trial.suggest_int(f'n_units_{i}', 32, 256), activation='relu'))
            model.add(BatchNormalization())
            model.add(Dropout(trial.suggest_float(f'dropout_{i}', 0.2, 0.5)))
    elif model_type == 'conv1d':
        # Conv1D model
        model.add(Reshape((X_train_poly.shape[1], 1)))  # Reshape for Conv1D
        for i in range(trial.suggest_int('n_layers_conv1d', 1, 3)):
            model.add(Conv1D(filters=trial.suggest_int(f'n_filters_{i}', 32, 128),
                             kernel_size=trial.suggest_int(f'kernel_size_{i}', 3, 7),
                             activation='relu'))
            model.add(BatchNormalization())
            model.add(Dropout(trial.suggest_float(f'dropout_{i}', 0.2, 0.5)))
        model.add(Flatten())
    elif model_type == 'lstm':
        # LSTM model
        model.add(Reshape((X_train_poly.shape[1], 1)))  # Reshape for LSTM
        for i in range(trial.suggest_int('n_layers_lstm', 1, 3)):
            model.add(LSTM(trial.suggest_int(f'n_units_{i}', 32, 256), return_sequences=(i < trial.suggest_int('n_layers_lstm', 1, 3) - 1)))
            model.add(BatchNormalization())
            model.add(Dropout(trial.suggest_float(f'dropout_{i}', 0.2, 0.5)))

    model.add(Dense(y_train.shape[1]))  # Output layer with the same number of neurons as output features
    
    optimizer = Adam(learning_rate=trial.suggest_loguniform('learning_rate', 1e-5, 1e-2))
    model.compile(optimizer=optimizer, loss='mean_squared_error')
    return model

# Define the objective function for Optuna
def objective(trial):
    model = create_model(trial)
    
    history = model.fit(X_train_poly, y_train, 
                        validation_split=0.2,
                        epochs=50, 
                        batch_size=32, 
                        verbose=0)
    
    # Evaluate the model
    loss = model.evaluate(X_test_poly, y_test, verbose=0)
    return loss

# Create a study object and optimize the objective function
study = optuna.create_study(direction='minimize')
study.optimize(objective, n_trials=50)

# Save the best hyperparameters
joblib.dump(study.best_params, 'models/best_hyperparameters.pkl')

# Output the best hyperparameters
print("Best hyperparameters: ", study.best_params)
